# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    outputs:
      os: ${{ matrix.os }}
      run_number: ${{ github.run_number }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      # ... (steps to setup environment, checkout code)
      - name: Build
        run: dotnet build
      - name: Test
        run: dotnet test
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ github.run_number }}
          path: path/to/test-results

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Download Test Results for Ubuntu
        uses: actions/download-artifact@v4
        with:
          name: test-results-ubuntu-latest-${{ needs.build-and-test.outputs.os }}-${{ needs.build-and-test.outputs.run_number }}
          path: path/to/downloaded-test-results
      - name: Download Test Results for Windows
        uses: actions/download-artifact@v4
        with:
          name: test-results-windows-latest-${{ needs.build-and-test.outputs.os }}-${{ needs.build-and-test.outputs.run_number }}
          path: path/to/downloaded-test-results
